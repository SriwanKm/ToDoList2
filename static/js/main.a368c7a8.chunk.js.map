{"version":3,"sources":["util/firebase.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","TodoApp","useState","task","setTask","todoRef","database","ref","useEffect","on","snapshot","todos","val","taskList","id","push","setTaskList","className","onChange","e","target","value","handleChange","type","name","placeholder","onClick","taskDetails","isCompleted","map","t","key","child","remove","update","then","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4TAWAA,IAASC,cATc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKIP,QAAf,EC6EeQ,MAtFf,WAAoB,IAAD,EAESC,mBAAS,IAFlB,mBAERC,EAFQ,KAEFC,EAFE,KAQTC,EAAUZ,EAASa,WAAWC,IAAI,SAGxCC,qBAAU,WACNH,EAAQI,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAQD,EAASE,MACjBC,EAAW,GACjB,IAAK,IAAIC,KAAMH,EACXE,EAASE,KAAT,aAAeD,MAAOH,EAAMG,KAEhCE,EAAYH,QAEjB,IApBY,MAwBiBX,mBAAS,IAxB1B,mBAwBRW,EAxBQ,KAwBEG,EAxBF,KA4Ef,OACI,yBAAKC,UAAU,QACX,2BAAOC,SAAU,SAACC,GAAD,OA3EJ,SAACA,GAClBf,EAAQe,EAAEC,OAAOC,OA0EWC,CAAaH,IAAIE,MAAOlB,EAAMoB,KAAK,OAAOC,KAAK,OAAOV,GAAG,OAC1EW,YAAY,qBACnB,4BAAQR,UAAU,UAAUS,QAtDpB,WACZ,GAAa,KAATvB,EAAa,CACb,IAAMwB,EAAc,CAEhBN,MAAOlB,EACPyB,aAAa,GAEjBZ,EAAY,GAAD,mBAAKH,GAAL,CAAec,KAC1BtB,EAAQU,KAAKY,GAEbvB,EAAQ,OA4CR,OAtBeS,IAAa,GAChC,4BACKA,EAASgB,KAAI,SAAAC,GAAC,OACX,wBAAIC,IAAKD,EAAEhB,GAAIG,UAAWa,EAAEF,YAAc,YAAc,YACnDE,EAAET,MACH,4BAAQK,QAAS,kBAxBbZ,EAwB8BgB,EAAEhB,QAvBhDT,EAAQ2B,MAAMlB,GAAImB,SADH,IAACnB,GAyBIG,UAAU,UADlB,UAGA,4BAAQS,QAAS,kBAtBVE,EAsB8BE,EAAEF,YAtBnBd,EAsBgCgB,EAAEhB,QAZlET,EAAQ2B,MAAMlB,GAAIoB,OAAO,CAACN,aAAcA,IAAcO,KAAKC,QAAQC,IAAI,yBAVrD,IAACT,EAAad,GAuBZG,UAAU,aADlB,kBAKV,OC9DKqB,MATf,WACE,OACE,yBAAKrB,UAAU,OACb,0BAAMA,UAAU,SAAhB,aADF,IAC2C,6BACzC,kBAAC,EAAD,QCIcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.a368c7a8.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDdiUfM1ZwhzXWXiZrKRmU8zb0KY30i9zQ\",\n    authDomain: \"todolist2-e4def.firebaseapp.com\",\n    projectId: \"todolist2-e4def\",\n    storageBucket: \"todolist2-e4def.appspot.com\",\n    messagingSenderId: \"606899238942\",\n    appId: \"1:606899238942:web:5b9e89f4d91a0e8f24960f\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase","import React, {useState, useEffect} from \"react\";\nimport \"./todoapp.css\"\nimport firebase from \"../util/firebase\"\n\nfunction TodoApp() {\n\n    const [task, setTask] = useState(\"\");\n    const handleChange = (e) => {\n        setTask(e.target.value)\n        // e.target.value = \"\"\n    }\n\n    const todoRef = firebase.database().ref('Tasks')\n\n\n    useEffect(() => {\n        todoRef.on('value', (snapshot) => {\n            const todos = snapshot.val()\n            const taskList = []\n            for (let id in todos){\n                taskList.push({id, ...todos[id]})\n            }\n            setTaskList(taskList)\n        })\n    }, [])\n\n\n\n    const [taskList, setTaskList] = useState([])\n\n    const addTask = () => {\n        if (task !== \"\") {\n            const taskDetails = {\n                // id: Math.floor(Math.random() * 1000),\n                value: task,\n                isCompleted: false\n            }\n            setTaskList([...taskList, taskDetails])\n            todoRef.push(taskDetails)\n\n            setTask(\"\")\n        }\n    }\n    const deleteTask = (id) => {\n        todoRef.child(id).remove()\n        // setTaskList([...taskList.filter(t => t.id != id)])\n    }\n\n    const taskCompleted = (isCompleted, id) => {\n        // const element = taskList.findIndex(elem => elem.id == id)\n        // const newTaskList = [...taskList]\n        //\n        // newTaskList[element] = {\n        //     ...newTaskList[element], isCompleted: !isCompleted\n        // }\n        // setTaskList(newTaskList)\n\n\n        todoRef.child(id).update({isCompleted: !isCompleted}).then(console.log(\"Successfully Updated\"))\n\n    }\n\n    const makeList = () => taskList !== [] ?\n        <ul>\n            {taskList.map(t =>\n                <li key={t.id} className={t.isCompleted ? \"crossText\" : \"listitem\"}>\n                    {t.value}\n                    <button onClick={() => deleteTask(t.id)}\n                            className=\"delete\">Delete\n                    </button>\n                    <button onClick={() => taskCompleted(t.isCompleted, t.id)}\n                            className=\"completed\">Completed\n                    </button>\n                </li>)}\n        </ul>\n        : null;\n\n\n\n\n    return (\n        <div className=\"todo\">\n            <input onChange={(e) => handleChange(e)} value={task} type=\"text\" name=\"text\" id=\"text\"\n                   placeholder=\"Add task here...\"/>\n            <button className=\"add-btn\" onClick={addTask}>Add</button>\n            {makeList()}\n        </div>\n    )\n}\n\nexport default TodoApp\n\n\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoApp from \"./components/TodoApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <span className=\"title\">Todo List</span> <br />\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}